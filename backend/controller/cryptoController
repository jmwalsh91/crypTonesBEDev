const express = require('express')
/* const  = require('../models/products') */
const router = express.Router()
const mongoose = require('mongoose')
const axios = require('axios').default;
const _ = require('lodash')


const valArray = []

const axiosCrypt = axios.create({
    baseURL: 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest',
    timeout: 1000,
    headers: {'X-CMC_PRO_API_KEY': '9afa7f9a-3812-4a98-83ce-d3d415ca6909'}
  });

const axiosNomics = axios.create({
    baseURL: '',
    timeout: 1000,
    headers: {'X-CMC_PRO_API_KEY': '9afa7f9a-3812-4a98-83ce-d3d415ca6909'}
})

/*  axiosCrypt.get( '', {
    params: {
        start: 1,
        limit: 2,
        convert: 'USD'
    }
})
.then(data => data.data)
.finally(console.log(data)); 
 */


/*
this works
 router.get("/", (req, res, next) => {
    console.log('ROUTER HIT')
    const noteArray = ['48','81','36','74'] 
    axiosCrypt.get( '', {
        params: {
            start: 1,
            limit: 2,
            convert: 'USD'
        }      
    })
    .then(data => data.data)
    .then((data.data))
    .finally(console.log(data));
})   */

/* router.get("/test", (req, res, next) => {
    axiosCrypt.get( '', {
        params: {
            start: 1,
            limit: 5,
            convert: 'USD'
        }
    })
    .then(data => console.log(data.data))
    .finally(next);
})   */


//alphaVantage APIKey: CQGAUB8UWNFMD2AJ
//'https://www.alphavantage.co/query?function=CRYPTO_INTRADAY


const axiosCryptAlpha = axios.create({
    baseURL: 'https://www.alphavantage.co/query?function=CRYPTO_INTRADAY',
    timeout: 10000,
    headers: {'apikey': 'CQGAUB8UWNFMD2AJ'}
  });
  let valArr = []
  /* 
  axiosCryptAlpha.interceptors.response.use(response => { 
    let target = response.data['Time Series Crypto (5min)']
    let victory = []
    let newArr = (Object.values(target))
    let newestVictory = []
    for (thing of newArr) {
        victory.push(Object.entries(thing))
    }
    console.log(victory)
    for (let i = 0; i < victory.length; i++) {
        let newVictory = victory[i]
        for (let j = 0; j < newVictory.length; j++) {
            if (newVictory[j][0] === '4. close') {
                newestVictory.push(parseInt(newVictory[j][1]))
            }
        }
    } 
    console.log(newestVictory)
})  */

let btcArr = 
    [41408, 41399, 41162, 41452, 41385, 41339, 41751, 41809,
    41730, 41803, 41894, 41919, 41845, 41949, 42100, 42290,
    42358, 42800, 42766, 42757, 42774, 42799, 42860, 42823,
    42815, 42835, 42874, 42935, 42902, 42904, 42871, 42875,
    43004, 43008, 43000, 42967, 42950, 42961, 42999, 42970,
    42833, 42882, 42929, 42947, 42904, 42788, 42843, 42787,
    42765, 42800, 42759, 42905, 42885, 42864, 42922, 42940,
    43071, 43082, 43120, 43129, 43207, 43207, 43154, 43155,
    43071, 43095, 43156, 43122, 43131, 43180, 43195, 43124,
    43103, 43190, 43190, 43141, 43154, 43051, 43026, 43120,
    43141, 43120, 43153, 43139, 43121, 43215, 43177, 43189,
    43212, 43201, 43150, 43136, 43199, 43221, 43169, 43219,
    43227, 43179, 43232, 43318]
//GOAL!!!!!!!
/* Write a function that 
a) preserves > and < relationship for the current value and the prev value
b) performs the same operations on each index position the same number of times to get the number between 1 and 1000 */
let compareArr = []
function getLowerThanOneK () {

}
let relArr = []
let tryArr = []
function genRelArr () {
    btcArr.reduce(function(acc, cur, ind) {
        /* console.log(`${btcArr[ind]} versus ${btcArr[ind - 1]}`) */
        if (btcArr[ind] === btcArr[0]) {
            relArr.push('e')
            tryArr.push('e')
            return
        } else {
            let vally = (btcArr[ind] - btcArr[ind - 1])
            tryArr.push(vally)
            btcArr[ind] > btcArr[ind - 1] === true ? relArr.push('g') : relArr.push('l')
            return
        }
        
        }
   ,0
    )

console.log(relArr)
console.log(tryArr)
compareArr = _.zip(relArr, tryArr)
console.log(compareArr)
}
genRelArr()
let verArr = []
function preservesRelationship() {
    compareArr.forEach((pos) => {
        if (pos[0] === 'g' && pos[1] > 0 === true) {
            verArr.push('true greater')
        } else if (pos[0] === 'l' && pos[1] < 0 === true) {
            verArr.push('true lesser')
            
        } else {
            verArr.push('false')
        }
    })
    console.log(verArr)
    
}
preservesRelationship()

function anyFalse(arr, val) {
    let indexArr = []
    for(let i = 0; i < arr.length; i++){
        if (arr[i] === val){
            indexArr.push(i)}}
 console.log(indexArr)
}
anyFalse(verArr, 'false')
console.log(compareArr[61] + 'vallllll')

let newVals = []
function translateData () {
    btcArr.forEach((pos) => {
    let lengthVal = Math.ceil(Math.log10(pos + 1))
    transVal = (pos / (lengthVal * lengthVal)) / 13
    console.log(transVal / Math.ceil(Math.log10(transVal + 1)))
})
}
translateData()
function testApi() {
   
    axiosCryptAlpha.get( '', {
        params: {
            symbol: 'BTC',
            market: 'USD',
            interval: '5min',
            apikey: 'CQGAUB8UWNFMD2AJ'
        }      
    })
}
testApi()

module.exports = router 